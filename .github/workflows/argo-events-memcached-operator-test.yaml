on: workflow_dispatch

jobs:
  test-operator-installation:
    runs-on: ubuntu-latest
    env:
      EVENTS_NS: argo-events
      BRANCH_NAME: ${GITHUB_REF##*/}

    steps:
      - name: Install k3s
        uses: debianmaster/actions-k3s@master
        id: k3s
        with:
          version: 'latest'

      - name: Create namespaces
        run: |
          for ns in argo-events argo memcached
          do 
              kubectl create ns ${ns}
          done

      - name: Install Argo Events cluster-wide (don't do this in production)
        run: |
          kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-events/stable/manifests/install.yaml
          sleep 10
          kubectl wait -n ${EVENTS_NS} --for=condition=available --timeout=60s deployment/eventsource-controller
          kubectl wait -n ${EVENTS_NS} --for=condition=available --timeout=60s deployment/sensor-controller
          # Install with a validating admission controller
          kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-events/stable/manifests/install-validating-webhook.yaml
          kubectl wait -n ${EVENTS_NS} --for=condition=available --timeout=60s deployment/events-webhook

      - name: Install EventBus
        run: |
          kubectl apply -n ${EVENTS_NS} -f https://raw.githubusercontent.com/argoproj/argo-events/stable/examples/eventbus/native.yaml
          kubectl wait -n ${EVENTS_NS} --for=condition=available --timeout=60s deployment/eventbus-controller

      - name: Install Argo Workflows cluster-wide
        run: |
          kubectl -n argo apply -k github.com/argoproj/argo-workflows/manifests/cluster-install?ref=master

          # Use "pns" executor instead of Docker:
          # See https://github.com/argoproj/argo-workflows/issues/826#issuecomment-872426083
          kubectl patch -n argo configmap workflow-controller-configmap --patch '{"data":{"containerRuntimeExecutor":"pns"}}'
          # Disable default login
          kubectl patch -n argo deployment argo-server --patch='{"spec":{"template":{"spec":{"containers":[{"name":"argo-server","args":["server","--auth-mode=server"]}]}}}}'

          sleep 10

          kubectl wait -n argo --for=condition=available --timeout=240s deployment/argo-server
          kubectl wait -n argo --for=condition=available --timeout=60s deployment/workflow-controller

      - name: Install the Argo CLI
        run: |
          curl -sLO https://github.com/argoproj/argo-workflows/releases/download/v3.2.8/argo-linux-amd64.gz
          gunzip argo-linux-amd64.gz
          chmod +x argo-linux-amd64
          mv argo-linux-amd64 argo
          ./argo version

      - name: Install the Memcached custom resource definition
        run: |
          kubectl apply -f https://raw.githubusercontent.com/reinvantveer/reinvantveer.github.io/${BRANCH_NAME}/_includes/memcached/crd.yaml

      - name: Install the rule-based access control (RBAC) config
        run: |
          kubectl apply -n ${EVENTS_NS} -f https://raw.githubusercontent.com/reinvantveer/reinvantveer.github.io/${BRANCH_NAME}/_includes/memcached/rbac.yaml

      - name: Validate that the rules allow watching Memcached resources, create Deployments, Pods, Workflows
        run: |
          kubectl -n ${EVENTS_NS} auth can-i list   memcached.cache.example.com/memcacheds --as=system:serviceaccount:${EVENTS_NS}:memcached-sa
          kubectl -n ${EVENTS_NS} auth can-i create deployments --as=system:serviceaccount:${EVENTS_NS}:memcached-sa
          kubectl -n ${EVENTS_NS} auth can-i create pods --as=system:serviceaccount:${EVENTS_NS}:memcached-sa
          kubectl -n ${EVENTS_NS} auth can-i create workflow.argoproj.io/workflows --as=system:serviceaccount:${EVENTS_NS}:memcached-sa

      - name: Install the EventSource in the events namespace
        run: |
          kubectl apply -n ${EVENTS_NS} -f https://raw.githubusercontent.com/reinvantveer/reinvantveer.github.io/${BRANCH_NAME}/_includes/memcached/event-source.yaml

      - name: Validate availability of the event source
        run: |
          kubectl wait -n ${EVENTS_NS} --for=condition=Deployed --timeout=60s eventsource/memcached-source
          kubectl wait -n ${EVENTS_NS} --for=condition=SourcesProvided --timeout=60s eventsource/memcached-source

      - name: Install the Sensor in the events namespace
        run: |
          kubectl apply -n ${EVENTS_NS} -f https://raw.githubusercontent.com/reinvantveer/reinvantveer.github.io/${BRANCH_NAME}/_includes/memcached/sensor.yaml

      - name: Validate availability of the Sensor
        run: |
          kubectl wait -n ${EVENTS_NS} --for=condition=Deployed --timeout=60s sensor/memcached-sensor
          kubectl wait -n ${EVENTS_NS} --for=condition=DependenciesProvided --timeout=60s sensor/memcached-sensor
          kubectl wait -n ${EVENTS_NS} --for=condition=TriggersProvided --timeout=60s sensor/memcached-sensor
          sleep 10

      - name: Install the operator implementation details in the ConfigMap
        run: |
          kubectl apply -n ${EVENTS_NS} -f https://raw.githubusercontent.com/reinvantveer/reinvantveer.github.io/${BRANCH_NAME}/_includes/memcached/configmap.yaml

      - name: Install the workflow template
        run: |
          kubectl apply -n ${EVENTS_NS} -f https://raw.githubusercontent.com/reinvantveer/reinvantveer.github.io/${BRANCH_NAME}/_includes/memcached/workflow-template.yaml

      - name: Deploy our Memcached resource
        run: |
          kubectl apply -n ${EVENTS_NS} -f https://raw.githubusercontent.com/reinvantveer/reinvantveer.github.io/${BRANCH_NAME}/_includes/memcached/memcached.yaml
          sleep 10

      - name: Log the sensor output
        run: |
          SENSOR_DEPLOYMENT=$(kubectl get -n ${EVENTS_NS} --no-headers deployment -o custom-columns=":metadata.name" | grep memcached-sensor-)
          kubectl logs -n ${EVENTS_NS} deployment/${SENSOR_DEPLOYMENT}
          sleep 5

      - name: Validate that a Workflow was created
        run: |
          WORKFLOW=$(kubectl get -n ${EVENTS_NS} workflows --no-headers -o custom-columns=":metadata.name" | grep memcached-workflow-)
          kubectl get -n ${EVENTS_NS} workflow/${WORKFLOW} -o yaml

          ./argo -n ${EVENTS_NS} watch @latest
          
          while kubectl get -n ${EVENTS_NS} workflow/${WORKFLOW} | grep Running
          do
            kubectl get -n ${EVENTS_NS} workflow/${WORKFLOW}
            sleep 10
          done

          # Log the workflow output
          ./argo -n ${EVENTS_NS} logs ${WORKFLOW}

      - name: Validate that the deployment was created
        run: |
          kubectl get -A deployments
          kubectl wait -n ${EVENTS_NS} --for=condition=available --timeout=60s deployment/memcached-deployment
